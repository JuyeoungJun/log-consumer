plugins {
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'java-library'
	id 'jacoco'
	id "org.barfuin.gradle.jacocolog" version "1.2.4"
}

group = 'gabia'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.projectlombok:lombok:1.18.18'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.7.2'
    implementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
//	runtimeOnly 'io.micrometer:micrometer-registry-influx'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '3.0.2'
	api 'com.influxdb:influxdb-client-java:2.3.0'

	//JUnit4 추가
	testImplementation("org.junit.vintage:junit-vintage-engine") {
		exclude group: "org.hamcrest", module: "hamcrest-core"
	}
}

test {
	useJUnitPlatform()
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.5'
//  테스트결과 리포트를 저장할 경로 변경
//  default는 "${project.reporting.baseDir}/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled true
		xml.enabled true
		csv.enabled false
//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
		xml.destination file("build/jacoco/jacoco.xml")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/dto/',
							  '**/entity/',
							  '**/exception/',
							  '**/util/',
							  '**/service/WebhookService'
					] )
		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}
			excludes = [
					'*.dto.*',
					'*.*DTO',
					'*.*Dto',
					'*.*Exception',
					'*.*Handler',
					'*.LogConsumerApplication',
					'*.entity.*',
					'*.util.*',
					'*.service.WebhookService'
			]
		}
	}
}